// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL") // uses connection pooling
    relationMode = "prisma"

    // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

generator client {
    provider        = "prisma-client-js"
    // previewFeatures = ["jsonProtocol"]
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
    id            String          @id @default(cuid())
    name          String?
    // if you are using Github OAuth, you can get rid of the username attribute (that is for Twitter OAuth)
    username      String?
    gh_username   String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    accounts      Account[]
    sessions      Session[]
    PaymentMethod PaymentMethod[]
    Transaction   Transaction[]
    categories    Category[]
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.LongText
    refresh_token_expires_in Int?
    access_token             String? @db.LongText
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.LongText
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PaymentMethod {
    id          String        @id @default(cuid())
    name        String?
    description String?
    userId      String
    user        User?         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    Transaction Transaction[]
    Category    Category?     @relation(fields: [categoryId], references: [id])
    categoryId  String?

    @@index([userId])
    @@index([categoryId])
}

model Transaction {
    id              String        @id @default(cuid())
    paymentMethodId String
    amount          Float
    currency        String
    description     String?
    title           String
    paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    userId          String
    user            User?         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    type            String

    transactionDate DateTime
    Category        Category? @relation(fields: [categoryId], references: [id])
    categoryId      String?

    @@index([paymentMethodId])
    @@index([userId])
    @@index([categoryId])
}

model Category {
    id            String          @id @default(cuid())
    name          String
    description   String?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    transactions  Transaction[]
    paymentMethod PaymentMethod[]
    User          User?           @relation(fields: [userId], references: [id])
    userId        String?

    @@index([userId])
}
